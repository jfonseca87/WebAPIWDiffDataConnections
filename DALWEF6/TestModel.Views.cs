//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(DALWEF6.TestEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets4feed5b5ce99da56462d6ae975935a059c13ad73c08308e71d66069430776037))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets4feed5b5ce99da56462d6ae975935a059c13ad73c08308e71d66069430776037 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "4feed5b5ce99da56462d6ae975935a059c13ad73c08308e71d66069430776037"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "TestModelStoreContainer.Cliente")
            {
                return GetView0();
            }

            if (extentName == "TestModelStoreContainer.DetalleFactura")
            {
                return GetView1();
            }

            if (extentName == "TestModelStoreContainer.Factura")
            {
                return GetView2();
            }

            if (extentName == "TestEntities.Cliente")
            {
                return GetView3();
            }

            if (extentName == "TestEntities.DetalleFactura")
            {
                return GetView4();
            }

            if (extentName == "TestEntities.Factura")
            {
                return GetView5();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for TestModelStoreContainer.Cliente.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cliente
        [TestModel.Store.Cliente](T1.Cliente_IdCliente, T1.Cliente_NomCliente, T1.Cliente_EmailCliente)
    FROM (
        SELECT 
            T.IdCliente AS Cliente_IdCliente, 
            T.NomCliente AS Cliente_NomCliente, 
            T.EmailCliente AS Cliente_EmailCliente, 
            True AS _from0
        FROM TestEntities.Cliente AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestModelStoreContainer.DetalleFactura.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DetalleFactura
        [TestModel.Store.DetalleFactura](T1.DetalleFactura_IdDetalleFactura, T1.DetalleFactura_Item, T1.DetalleFactura_ValorItem, T1.DetalleFactura_CantidadItem, T1.DetalleFactura_ValorItems, T1.DetalleFactura_IdFactura)
    FROM (
        SELECT 
            T.IdDetalleFactura AS DetalleFactura_IdDetalleFactura, 
            T.Item AS DetalleFactura_Item, 
            T.ValorItem AS DetalleFactura_ValorItem, 
            T.CantidadItem AS DetalleFactura_CantidadItem, 
            T.ValorItems AS DetalleFactura_ValorItems, 
            T.IdFactura AS DetalleFactura_IdFactura, 
            True AS _from0
        FROM TestEntities.DetalleFactura AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestModelStoreContainer.Factura.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Factura
        [TestModel.Store.Factura](T1.Factura_IdFactura, T1.Factura_NumFactura, T1.Factura_TotalFactura, T1.Factura_IdCliente)
    FROM (
        SELECT 
            T.IdFactura AS Factura_IdFactura, 
            T.NumFactura AS Factura_NumFactura, 
            T.TotalFactura AS Factura_TotalFactura, 
            T.IdCliente AS Factura_IdCliente, 
            True AS _from0
        FROM TestEntities.Factura AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestEntities.Cliente.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Cliente
        [TestModel.Cliente](T1.Cliente_IdCliente, T1.Cliente_NomCliente, T1.Cliente_EmailCliente)
    FROM (
        SELECT 
            T.IdCliente AS Cliente_IdCliente, 
            T.NomCliente AS Cliente_NomCliente, 
            T.EmailCliente AS Cliente_EmailCliente, 
            True AS _from0
        FROM TestModelStoreContainer.Cliente AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestEntities.DetalleFactura.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DetalleFactura
        [TestModel.DetalleFactura](T1.DetalleFactura_IdDetalleFactura, T1.DetalleFactura_Item, T1.DetalleFactura_ValorItem, T1.DetalleFactura_CantidadItem, T1.DetalleFactura_ValorItems, T1.DetalleFactura_IdFactura)
    FROM (
        SELECT 
            T.IdDetalleFactura AS DetalleFactura_IdDetalleFactura, 
            T.Item AS DetalleFactura_Item, 
            T.ValorItem AS DetalleFactura_ValorItem, 
            T.CantidadItem AS DetalleFactura_CantidadItem, 
            T.ValorItems AS DetalleFactura_ValorItems, 
            T.IdFactura AS DetalleFactura_IdFactura, 
            True AS _from0
        FROM TestModelStoreContainer.DetalleFactura AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TestEntities.Factura.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Factura
        [TestModel.Factura](T1.Factura_IdFactura, T1.Factura_NumFactura, T1.Factura_TotalFactura, T1.Factura_IdCliente)
    FROM (
        SELECT 
            T.IdFactura AS Factura_IdFactura, 
            T.NumFactura AS Factura_NumFactura, 
            T.TotalFactura AS Factura_TotalFactura, 
            T.IdCliente AS Factura_IdCliente, 
            True AS _from0
        FROM TestModelStoreContainer.Factura AS T
    ) AS T1");
        }
    }
}
